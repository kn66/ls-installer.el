* LSP Installer

=lsp-installer= is a simple, powerful language server installer for Emacs following KISS principles.

** What It Does

Installs, updates, and manages 51+ language servers with zero configuration. All servers are automatically added to =exec-path= and ready to use with any LSP client (eglot, lsp-mode, etc.).

** Key Features

- *Simple*: One command installs any language server
- *Comprehensive*: Supports 51+ language servers across all major languages
- *Multiple methods*: npm, pip, go, gem, dotnet, GitHub releases, binary archives
- *Auto-cleanup*: Removes old installations automatically
- *Cross-platform*: Windows, Linux, macOS with intelligent platform detection
- *Wildcard paths*: Handles version-specific directories (e.g., =clangd_18.1.3/bin=)
- *Zero config*: Works immediately after installation

** Installation

#+BEGIN_SRC emacs-lisp
(use-package lsp-installer
  :vc ( :url "https://github.com/kn66/lsp-installer.el"
        :rev :newest)
  :config
  (lsp-installer-setup))
#+END_SRC

** Quick Start

#+BEGIN_SRC emacs-lisp
;; Install a language server
M-x lsp-installer-install-server RET typescript-language-server RET

;; View all available servers
M-x lsp-installer-list-servers
#+END_SRC

** Commands

| Command                             | Description                              |
|-------------------------------------+------------------------------------------|
| =lsp-installer-install-server=      | Install a language server               |
| =lsp-installer-uninstall-server=    | Uninstall a language server             |
| =lsp-installer-update-server=       | Update a language server                |
| =lsp-installer-list-servers=        | List all available/installed servers    |
| =lsp-installer-setup=               | Add installed servers to exec-path      |

** Supported Language Servers (51+)

*** Programming Languages
- *JavaScript/TypeScript*: typescript-language-server, vscode-eslint-language-server
- *Python*: pyright, pylsp, jedi-language-server
- *Rust*: rust-analyzer
- *Go*: gopls, golangci-lint, goimports, gofumpt, staticcheck, go-outline
- *C/C++*: clangd
- *Java*: jdtls
- *C#*: csharp-ls, omnisharp
- *Ruby*: solargraph
- *PHP*: intelephense
- *Haskell*: haskell-language-server
- *Elixir*: elixir-ls
- *Kotlin*: kotlin-language-server
- *Scala*: metals
- *Zig*: zls
- *Lua*: lua-language-server
- *Fortran*: fortls

*** Web Technologies
- *HTML/CSS/JSON*: vscode-html-language-server, vscode-css-language-server, vscode-json-language-server
- *Vue.js*: vue-language-server
- *Svelte*: svelte-language-server
- *Emmet*: emmet-ls
- *GraphQL*: graphql-language-service-cli
- *Prisma*: prisma-language-server

*** DevOps & Configuration
- *Docker*: dockerfile-language-server-nodejs
- *YAML*: yaml-language-server, ansible-language-server
- *TOML*: taplo
- *Terraform*: terraform-ls
- *Ansible*: ansible-language-server

*** Other Languages & Tools
- *Bash*: bash-language-server
- *CMake*: cmake-language-server
- *Markdown*: marksman
- *SQL*: sql-language-server
- *Diagnostic*: diagnostic-languageserver

** Architecture

=lsp-installer= follows KISS principles with a simple, unified approach:

- *Configuration-driven*: All server definitions in =servers.eld=
- *No hidden paths*: All paths explicitly specified in =:path-dirs=
- *No file manipulation*: Preserves natural installation structures
- *Auto-cleanup*: Removes old installations automatically
- *Wildcard support*: Handles version-specific directories with patterns

** Installation Methods

| Method   | Description           | Example Source                           |
|----------+-----------------------+------------------------------------------|
| =npm=    | Node.js packages      | "typescript-language-server"            |
| =pip=    | Python packages       | "python-lsp-server"                      |
| =go=     | Go packages           | "golang.org/x/tools/gopls@latest"       |
| =gem=    | Ruby gems             | "solargraph"                             |
| =dotnet= | .NET tools            | "csharp-ls"                              |
| =github= | GitHub releases       | "rust-lang/rust-analyzer"               |
| =binary= | Direct URLs           | "https://example.com/server.tar.gz"     |

** Configuration Format

#+BEGIN_SRC emacs-lisp
( :name "server-name"                    ; Unique identifier
  :description "Human readable name"     ; Description
  :install-method "method"               ; Installation method
  :source "source"                       ; Package/repo/URL
  :executable "executable"               ; Executable name
  :path-dirs ("bin" "scripts")           ; Paths to add to exec-path (required)
  :options (:strip-components 1)         ; Method options (optional)
  :lsp-config (...))                     ; LSP configuration
#+END_SRC

** Example: TypeScript Language Server

#+BEGIN_SRC emacs-lisp
( :name "typescript-language-server"
  :description "TypeScript & JavaScript language server"
  :install-method "npm"
  :source "typescript-language-server"
  :executable "typescript-language-server"
  :path-dirs ("node_modules/.bin")       ; npm installs binaries here
  :lsp-config
  ( :server-id 'ts-ls
    :major-modes '(typescript-mode js-mode)
    :priority 0))
#+END_SRC

** Wildcard Path Example

#+BEGIN_SRC emacs-lisp
( :name "clangd"
  :description "C/C++ language server"
  :install-method "github"
  :source "clangd/clangd"
  :executable "clangd"
  :path-dirs ("clangd_*/bin")            ; Handles clangd_18.1.3/bin automatically
  :options (:strip-components 1))
#+END_SRC

** Customization

#+BEGIN_SRC emacs-lisp
;; Change installation directory (default: ~/.emacs.d/language-servers)
(setq lsp-installer-install-dir "~/my-language-servers")

;; Use custom server definitions file
(setq lsp-installer-servers-file "~/my-servers.eld")
#+END_SRC

** Integration Examples

*** With Eglot

#+BEGIN_SRC emacs-lisp
;; JDTLS integration
(with-eval-after-load 'eglot
  (let* ((info (lsp-installer-jdtls-command-info))
         (cmd (cons '(java-mode java-ts-mode)
                    (append (list (cdr (assoc :executable info)))
                            (cdr (assoc :args info))))))
    (add-to-list 'eglot-server-programs cmd)))
#+END_SRC

*** With LSP Mode

Language servers installed by =lsp-installer= work automatically with lsp-mode since they're added to =exec-path=.

** Requirements

Required tools for installation methods:
- =npm=: Node.js and npm
- =pip=: Python and pip3
- =go=: Go compiler
- =gem=: Ruby and gem
- =dotnet=: .NET SDK
- =github/binary=: curl or wget, tar, unzip

** FAQ

*Q: Installation fails?*
Ensure required tools are in PATH (npm, pip, go, etc.).

*Q: Want to add a server?*
Add server definition to =servers.eld= using the configuration format above.

*Q: Server not found after installation?*
Run =M-x lsp-installer-setup= to refresh =exec-path=.

** License

MIT License
