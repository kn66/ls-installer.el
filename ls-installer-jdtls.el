;;; ls-installer-jdtls.el --- JDT Language Server installation for ls-installer -*- lexical-binding: t; -*-

;; Copyright (C) 2025

;;; Commentary:

;; This file contains JDT Language Server specific installation functions for ls-installer.

;;; Code:

;;; JDT Language Server installation functions

(defun ls-installer--install-jdtls
    (server-name url &optional target-subdir)
  "Install Eclipse JDT Language Server with proper setup.
SERVER-NAME is the name of the server.
URL is the download URL for the JDT LS archive.
TARGET-SUBDIR is optional subdirectory to extract to."
  (let* ((server-dir
          (ls-installer--get-server-install-dir server-name))
         (bin-dir (expand-file-name "bin" server-dir))
         (temp-dir (make-temp-file "ls-installer-jdtls-" t))
         (filename "jdt-language-server.tar.gz")
         (temp-file (expand-file-name filename temp-dir))
         (extract-dir
          (if target-subdir
              (expand-file-name target-subdir server-dir)
            server-dir)))

    (unwind-protect
        (progn
          (ls-installer--ensure-directory server-dir)
          (ls-installer--ensure-directory bin-dir)
          (ls-installer--message
           "Installing Eclipse JDT Language Server...")

          ;; Download JDT LS
          (ls-installer--download-file url temp-file)

          ;; Extract the archive
          (ls-installer--extract-archive temp-file extract-dir)

          ;; Create wrapper script for jdtls
          (ls-installer--create-jdtls-wrapper server-name extract-dir)

          (ls-installer--message
           "Successfully installed Eclipse JDT Language Server")
          (ls-installer--add-to-exec-path server-name)
          t)

      ;; Cleanup
      (when (file-exists-p temp-dir)
        (delete-directory temp-dir t)))))

(defun ls-installer--create-jdtls-wrapper (server-name jdtls-dir)
  "Create wrapper script for JDT Language Server.
SERVER-NAME is the name of the server.
JDTLS-DIR is the directory where JDT LS is installed."
  (let* ((server-dir
          (ls-installer--get-server-install-dir server-name))
         (bin-dir (expand-file-name "bin" server-dir))
         (wrapper-script (expand-file-name "jdtls" bin-dir))
         (config-dir
          (cond
           ((eq system-type 'darwin)
            (if (string-match "arm\\|aarch64" system-configuration)
                "config_mac_arm"
              "config_mac"))
           ((eq system-type 'gnu/linux)
            (if (string-match "arm\\|aarch64" system-configuration)
                "config_linux_arm"
              "config_linux"))
           ((eq system-type 'windows-nt)
            "config_win")
           (t
            "config_linux")))
         (jdtls-jar
          (expand-file-name
           "plugins/org.eclipse.equinox.launcher_*.jar"
           jdtls-dir))
         (config-path (expand-file-name config-dir jdtls-dir)))

    ;; Find the actual launcher jar
    (let ((launcher-jars (file-expand-wildcards jdtls-jar)))
      (unless launcher-jars
        (ls-installer--error
         "Could not find Eclipse launcher jar in %s" jdtls-dir))

      (setq jdtls-jar (car launcher-jars)))

    ;; Create the wrapper script
    (with-temp-file wrapper-script
      (insert "#!/bin/bash\n")
      (insert "\n")
      (insert "# Eclipse JDT Language Server wrapper script\n")
      (insert "# Generated by ls-installer\n")
      (insert "\n")
      (insert "JAVA_EXECUTABLE=\"java\"\n")
      (insert "if command -v java >/dev/null 2>&1; then\n")
      (insert "    JAVA_EXECUTABLE=\"java\"\n")
      (insert
       "elif [[ -n \"$JAVA_HOME\" ]] && [[ -x \"$JAVA_HOME/bin/java\" ]]; then\n")
      (insert "    JAVA_EXECUTABLE=\"$JAVA_HOME/bin/java\"\n")
      (insert "else\n")
      (insert
       "    echo \"Error: Java not found. Please install Java 11 or newer.\" >&2\n")
      (insert "    exit 1\n")
      (insert "fi\n")
      (insert "\n")
      (insert "# Check Java version\n")
      (insert
       "JAVA_VERSION=$($JAVA_EXECUTABLE -version 2>&1 | grep -oP 'version \"(1\\.)?\\K\\d+' | head -1)\n")
      (insert "if [[ $JAVA_VERSION -lt 11 ]]; then\n")
      (insert
       "    echo \"Error: Java 11 or newer is required. Found Java $JAVA_VERSION.\" >&2\n")
      (insert "    exit 1\n")
      (insert "fi\n")
      (insert "\n")
      (insert "# Set workspace directory\n")
      (insert "WORKSPACE=\"${1:-$PWD}\"\n")
      (insert "shift\n")
      (insert "\n")
      (insert "# JDT LS configuration\n")
      (insert (format "JDTLS_CONFIG=\"%s\"\n" config-path))
      (insert (format "JDTLS_LAUNCHER=\"%s\"\n" jdtls-jar))
      (insert "JDTLS_WORKSPACE=\"$HOME/.cache/jdtls-workspace\"\n")
      (insert "\n")
      (insert "# Create workspace directory if it doesn't exist\n")
      (insert "mkdir -p \"$JDTLS_WORKSPACE\"\n")
      (insert "\n")
      (insert "# Run JDT LS\n")
      (insert "exec \"$JAVA_EXECUTABLE\" \\\n")
      (insert
       "  -Declipse.application=org.eclipse.jdt.ls.core.id1 \\\n")
      (insert "  -Dosgi.bundles.defaultStartLevel=4 \\\n")
      (insert
       "  -Declipse.product=org.eclipse.jdt.ls.core.product \\\n")
      (insert "  -Dlog.protocol=true \\\n")
      (insert "  -Dlog.level=ALL \\\n")
      (insert "  -Xmx1G \\\n")
      (insert "  --add-modules=ALL-SYSTEM \\\n")
      (insert "  --add-opens java.base/java.util=ALL-UNNAMED \\\n")
      (insert "  --add-opens java.base/java.lang=ALL-UNNAMED \\\n")
      (insert "  -jar \"$JDTLS_LAUNCHER\" \\\n")
      (insert "  -configuration \"$JDTLS_CONFIG\" \\\n")
      (insert "  -data \"$JDTLS_WORKSPACE\" \\\n")
      (insert "  \"$@\"\n"))

    ;; Make the script executable
    (ls-installer--make-executable wrapper-script)

    ;; Create Windows batch file as well if on Windows
    (when (eq system-type 'windows-nt)
      (let ((bat-script (concat wrapper-script ".bat")))
        (with-temp-file bat-script
          (insert "@echo off\n")
          (insert "setlocal\n")
          (insert "\n")
          (insert "REM Eclipse JDT Language Server wrapper script\n")
          (insert "REM Generated by ls-installer\n")
          (insert "\n")
          (insert "set JAVA_EXECUTABLE=java\n")
          (insert "java -version >nul 2>&1\n")
          (insert "if errorlevel 1 (\n")
          (insert "    if defined JAVA_HOME (\n")
          (insert
           "        set JAVA_EXECUTABLE=%JAVA_HOME%\\bin\\java\n")
          (insert "    ) else (\n")
          (insert
           "        echo Error: Java not found. Please install Java 11 or newer. 1>&2\n")
          (insert "        exit /b 1\n")
          (insert "    )\n")
          (insert ")\n")
          (insert "\n")
          (insert "set WORKSPACE=%1\n")
          (insert "if \"%WORKSPACE%\"==\"\" set WORKSPACE=%CD%\n")
          (insert "shift\n")
          (insert "\n")
          (insert (format "set JDTLS_CONFIG=%s\n" config-path))
          (insert (format "set JDTLS_LAUNCHER=%s\n" jdtls-jar))
          (insert
           "set JDTLS_WORKSPACE=%USERPROFILE%\\.cache\\jdtls-workspace\n")
          (insert "\n")
          (insert
           "if not exist \"%JDTLS_WORKSPACE%\" mkdir \"%JDTLS_WORKSPACE%\"\n")
          (insert "\n")
          (insert "\"%JAVA_EXECUTABLE%\" ^\n")
          (insert
           "  -Declipse.application=org.eclipse.jdt.ls.core.id1 ^\n")
          (insert "  -Dosgi.bundles.defaultStartLevel=4 ^\n")
          (insert
           "  -Declipse.product=org.eclipse.jdt.ls.core.product ^\n")
          (insert "  -Dlog.protocol=true ^\n")
          (insert "  -Dlog.level=ALL ^\n")
          (insert "  -Xmx1G ^\n")
          (insert "  --add-modules=ALL-SYSTEM ^\n")
          (insert "  --add-opens java.base/java.util=ALL-UNNAMED ^\n")
          (insert "  --add-opens java.base/java.lang=ALL-UNNAMED ^\n")
          (insert "  -jar \"%JDTLS_LAUNCHER%\" ^\n")
          (insert "  -configuration \"%JDTLS_CONFIG%\" ^\n")
          (insert "  -data \"%JDTLS_WORKSPACE%\" ^\n")
          (insert "  %*\n"))))

    (ls-installer--message
     "Created JDT LS wrapper script: %s" wrapper-script)))

(provide 'ls-installer-jdtls)

;;; ls-installer-jdtls.el ends here
